import numpy as np
import cv2
import glob

# 체스보드의 가로 및 세로 코너 개수
chessboard_size = (9, 6)

# 체스보드 코너 검출을 위한 설정
criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 30, 0.001)

# 체스보드 코너의 실제 3D 좌표 생성
object_points = np.zeros((chessboard_size[0] * chessboard_size[1], 3), np.float32)
object_points[:, :2] = np.mgrid[0:chessboard_size[0], 0:chessboard_size[1]].T.reshape(-1, 2)

# 체스보드 코너 검출을 위한 이미지 경로
image_path = "chessboard.png"

# 체스보드 코너 검출을 위한 이미지 로드
images = []
for file in glob.glob(image_path):
    image = cv2.imread(file)
    images.append(image)

# 체스보드 코너 검출을 위한 좌표 저장
image_points = []
for image in images:
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    ret, corners = cv2.findChessboardCorners(gray, chessboard_size, None)
    if ret:
        image_points.append(corners)

# 카메라 캘리브레이션 실행
ret, camera_matrix, dist_coeffs, rvecs, tvecs = cv2.calibrateCamera([object_points], image_points, gray.shape[::-1], None, None)

# 캘리브레이션 결과 저장
calibration_file = 'camera_calibration.xml'
calibration_data = cv2.FileStorage(calibration_file, cv2.FILE_STORAGE_WRITE)
calibration_data.write("camera_matrix", camera_matrix)
calibration_data.write("dist_coeffs", dist_coeffs)
calibration_data.release()
